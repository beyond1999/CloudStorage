// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: objectstore.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetaService_AllocatePlacement_FullMethodName = "/CloudStorage.v1.MetaService/AllocatePlacement"
	MetaService_PutObject_FullMethodName         = "/CloudStorage.v1.MetaService/PutObject"
	MetaService_CommitObject_FullMethodName      = "/CloudStorage.v1.MetaService/CommitObject"
)

// MetaServiceClient is the client API for MetaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaServiceClient interface {
	AllocatePlacement(ctx context.Context, in *AllocatePlacementRequest, opts ...grpc.CallOption) (*AllocatePlacementResponse, error)
	PutObject(ctx context.Context, in *PutObjectRequest, opts ...grpc.CallOption) (*PutObjectResponse, error)
	CommitObject(ctx context.Context, in *CommitObjectRequest, opts ...grpc.CallOption) (*CommitObjectResponse, error)
}

type metaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaServiceClient(cc grpc.ClientConnInterface) MetaServiceClient {
	return &metaServiceClient{cc}
}

func (c *metaServiceClient) AllocatePlacement(ctx context.Context, in *AllocatePlacementRequest, opts ...grpc.CallOption) (*AllocatePlacementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllocatePlacementResponse)
	err := c.cc.Invoke(ctx, MetaService_AllocatePlacement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) PutObject(ctx context.Context, in *PutObjectRequest, opts ...grpc.CallOption) (*PutObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutObjectResponse)
	err := c.cc.Invoke(ctx, MetaService_PutObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) CommitObject(ctx context.Context, in *CommitObjectRequest, opts ...grpc.CallOption) (*CommitObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitObjectResponse)
	err := c.cc.Invoke(ctx, MetaService_CommitObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaServiceServer is the server API for MetaService service.
// All implementations must embed UnimplementedMetaServiceServer
// for forward compatibility.
type MetaServiceServer interface {
	AllocatePlacement(context.Context, *AllocatePlacementRequest) (*AllocatePlacementResponse, error)
	PutObject(context.Context, *PutObjectRequest) (*PutObjectResponse, error)
	CommitObject(context.Context, *CommitObjectRequest) (*CommitObjectResponse, error)
	mustEmbedUnimplementedMetaServiceServer()
}

// UnimplementedMetaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetaServiceServer struct{}

func (UnimplementedMetaServiceServer) AllocatePlacement(context.Context, *AllocatePlacementRequest) (*AllocatePlacementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocatePlacement not implemented")
}
func (UnimplementedMetaServiceServer) PutObject(context.Context, *PutObjectRequest) (*PutObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutObject not implemented")
}
func (UnimplementedMetaServiceServer) CommitObject(context.Context, *CommitObjectRequest) (*CommitObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitObject not implemented")
}
func (UnimplementedMetaServiceServer) mustEmbedUnimplementedMetaServiceServer() {}
func (UnimplementedMetaServiceServer) testEmbeddedByValue()                     {}

// UnsafeMetaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaServiceServer will
// result in compilation errors.
type UnsafeMetaServiceServer interface {
	mustEmbedUnimplementedMetaServiceServer()
}

func RegisterMetaServiceServer(s grpc.ServiceRegistrar, srv MetaServiceServer) {
	// If the following call pancis, it indicates UnimplementedMetaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetaService_ServiceDesc, srv)
}

func _MetaService_AllocatePlacement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocatePlacementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).AllocatePlacement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaService_AllocatePlacement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).AllocatePlacement(ctx, req.(*AllocatePlacementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_PutObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).PutObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaService_PutObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).PutObject(ctx, req.(*PutObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_CommitObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).CommitObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaService_CommitObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).CommitObject(ctx, req.(*CommitObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaService_ServiceDesc is the grpc.ServiceDesc for MetaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CloudStorage.v1.MetaService",
	HandlerType: (*MetaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocatePlacement",
			Handler:    _MetaService_AllocatePlacement_Handler,
		},
		{
			MethodName: "PutObject",
			Handler:    _MetaService_PutObject_Handler,
		},
		{
			MethodName: "CommitObject",
			Handler:    _MetaService_CommitObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "objectstore.proto",
}

const (
	ObjNodeService_PutChunk_FullMethodName = "/CloudStorage.v1.ObjNodeService/PutChunk"
	ObjNodeService_GetChunk_FullMethodName = "/CloudStorage.v1.ObjNodeService/GetChunk"
)

// ObjNodeServiceClient is the client API for ObjNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjNodeServiceClient interface {
	PutChunk(ctx context.Context, in *PutChunkRequest, opts ...grpc.CallOption) (*PutChunkResponse, error)
	GetChunk(ctx context.Context, in *GetChunkRequest, opts ...grpc.CallOption) (*GetChunkResponse, error)
}

type objNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObjNodeServiceClient(cc grpc.ClientConnInterface) ObjNodeServiceClient {
	return &objNodeServiceClient{cc}
}

func (c *objNodeServiceClient) PutChunk(ctx context.Context, in *PutChunkRequest, opts ...grpc.CallOption) (*PutChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutChunkResponse)
	err := c.cc.Invoke(ctx, ObjNodeService_PutChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objNodeServiceClient) GetChunk(ctx context.Context, in *GetChunkRequest, opts ...grpc.CallOption) (*GetChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChunkResponse)
	err := c.cc.Invoke(ctx, ObjNodeService_GetChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjNodeServiceServer is the server API for ObjNodeService service.
// All implementations must embed UnimplementedObjNodeServiceServer
// for forward compatibility.
type ObjNodeServiceServer interface {
	PutChunk(context.Context, *PutChunkRequest) (*PutChunkResponse, error)
	GetChunk(context.Context, *GetChunkRequest) (*GetChunkResponse, error)
	mustEmbedUnimplementedObjNodeServiceServer()
}

// UnimplementedObjNodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedObjNodeServiceServer struct{}

func (UnimplementedObjNodeServiceServer) PutChunk(context.Context, *PutChunkRequest) (*PutChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutChunk not implemented")
}
func (UnimplementedObjNodeServiceServer) GetChunk(context.Context, *GetChunkRequest) (*GetChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunk not implemented")
}
func (UnimplementedObjNodeServiceServer) mustEmbedUnimplementedObjNodeServiceServer() {}
func (UnimplementedObjNodeServiceServer) testEmbeddedByValue()                        {}

// UnsafeObjNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjNodeServiceServer will
// result in compilation errors.
type UnsafeObjNodeServiceServer interface {
	mustEmbedUnimplementedObjNodeServiceServer()
}

func RegisterObjNodeServiceServer(s grpc.ServiceRegistrar, srv ObjNodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedObjNodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ObjNodeService_ServiceDesc, srv)
}

func _ObjNodeService_PutChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjNodeServiceServer).PutChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjNodeService_PutChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjNodeServiceServer).PutChunk(ctx, req.(*PutChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjNodeService_GetChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjNodeServiceServer).GetChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjNodeService_GetChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjNodeServiceServer).GetChunk(ctx, req.(*GetChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjNodeService_ServiceDesc is the grpc.ServiceDesc for ObjNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CloudStorage.v1.ObjNodeService",
	HandlerType: (*ObjNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutChunk",
			Handler:    _ObjNodeService_PutChunk_Handler,
		},
		{
			MethodName: "GetChunk",
			Handler:    _ObjNodeService_GetChunk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "objectstore.proto",
}
